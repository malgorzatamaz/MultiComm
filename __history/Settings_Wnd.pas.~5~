unit Settings_Wnd;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ComCtrls, SIPVoipSDK_TLB, CheckLst, Vcl.Buttons;

type
  TFormSettings = class(TForm)
    GroupBoxSound: TGroupBox;
    IdentificationGroupBox: TGroupBox;
    GroupBoxCodec: TGroupBox;
    LabelUserAgentEdit: TLabel;
    LabelCallerId: TLabel;
    CheckBoxEchoCancelation: TCheckBox;
    CheckBoxNoiseReduction: TCheckBox;
    CheckBoxAutoGainControl: TCheckBox;
    EditUserAgent: TEdit;
    EditCallerId: TEdit;
    ListBoxCodecs: TCheckListBox;
    GroupBoxDevices: TGroupBox;
    ComboBoxNetworkInterface: TComboBox;
    ComboBoxRecordDevice: TComboBox;
    ComboBoxSoundDevice: TComboBox;
    LabelNetworkInteface: TLabel;
    LabelSoundRecord: TLabel;
    LabelSoundDevice: TLabel;
    GroupBoxOther: TGroupBox;
    EditStun: TEdit;
    StunLabel: TLabel;
    LabelSipPort: TLabel;
    EditSipPort: TEdit;
    ComboBoxVideoDevice: TComboBox;
    LabelVideoDevice: TLabel;
    LabelAddr: TEdit;
    LabelVersion: TEdit;
    ButtonOk: TSpeedButton;
    ButtonCancel: TSpeedButton;
    ButtonMoveDown: TSpeedButton;
    ButtonMoveUp: TSpeedButton;
    GroupBoxLicense: TGroupBox;
    LabelUserId: TLabel;
    LabelKey: TLabel;
    EditUserId: TEdit;
    EditLicenseKey: TEdit;
    EditDomain: TEdit;
    Label1: TLabel;
    procedure ButtonMoveUpClick(Sender: TObject);
    procedure ButtonMoveDownClick(Sender: TObject);
    procedure MoveCodec(oldIndex, newIndex: Integer);
    function GetCodecsString : string;
  public
    Settings: Variant;
    procedure SetSettings(settings: Variant; version:WideString; addr:WideString);
    procedure SetupUserInput;
  end;

implementation

{$R *.dfm}

procedure TFormSettings.SetSettings(settings: Variant; version:WideString; addr:WideString);
var
    i : Integer;
begin

    Settings := settings;

    EditStun.Text := settings.StunServer;
    EditSipPort.Text := IntToStr(settings.ListenPort);

    EditUserAgent.Text := settings.UserAgent;
    EditCallerId.Text  := settings.CallerId;

    CheckBoxEchoCancelation.Checked := settings.EchoCancelationEnabled <> 0;
    CheckBoxNoiseReduction.Checked  := settings.NoiseReductionEnabled <> 0;
    CheckBoxAutoGainControl.Checked := settings.AutoGainControlEnabled <> 0;
    LabelVersion.Text := version;
    LabelAddr.Text := addr;


    { Codecs }
    for i := 0 to settings.CodecCount - 1 do begin
       ListBoxCodecs.Items.Add(settings.CodecName[i]);
       ListBoxCodecs.Checked[i] := settings.CodecSelected[i] <> 0;
    end;

    { Playback devices list }
    for i := 0 to settings.PlaybackDeviceCount - 1 do
       ComboBoxSoundDevice.Items.Add(settings.PlaybackDevice[i]);

    if settings.PlaybackDeviceCount <> 0 then
       ComboBoxSoundDevice.ItemIndex := Self.ComboBoxSoundDevice.Items.IndexOf(settings.ActivePlaybackDevice);

    { Record devices list }
    for i := 0 to settings.RecordDeviceCount - 1 do
        ComboBoxRecordDevice.Items.Add(settings.RecordDevice[i]);

    if settings.RecordDeviceCount <> 0 then
       Self.ComboBoxRecordDevice.ItemIndex := Self.ComboBoxRecordDevice.Items.IndexOf(settings.ActiveRecordDevice);

   { Network interfaces list }
    for i := 0 to settings.NetworkInterfaceCount - 1 do
        ComboBoxNetworkInterface.Items.Add(settings.NetworkInterface[i]);

    if settings.NetworkInterfaceCount <> 0 then
       ComboBoxNetworkInterface.ItemIndex := Self.ComboBoxNetworkInterface.Items.IndexOf(settings.ActiveNetworkInterface);

    { Video devices list }
    for i := 0 to settings.VideoDeviceCount - 1 do
        ComboBoxVideoDevice.Items.Add(settings.VideoDevice[i]);

    if settings.VideoDeviceCount <> 0 then
       ComboBoxVideoDevice.ItemIndex := ComboBoxVideoDevice.Items.IndexOf(settings.ActiveVideoDevice);

end;


procedure TFormSettings.ButtonMoveUpClick(Sender: TObject);
var
    selected : Integer;
begin
    selected := ListBoxCodecs.ItemIndex;
    if selected >= 1 then  MoveCodec(selected, selected - 1);

end;

procedure TFormSettings.ButtonMoveDownClick(Sender: TObject);
var
    selected : Integer;
begin
    selected := ListBoxCodecs.ItemIndex;
    if (selected <> -1) and (selected < ListBoxCodecs.Count - 1) then begin
        MoveCodec(selected, selected + 1);
    end;
end;

procedure TFormSettings.MoveCodec(oldIndex, newIndex: Integer);
var
    codecName: string;
    isChecked: Boolean;
begin
    codecName := ListBoxCodecs.Items[oldIndex];
    isChecked := ListBoxCodecs.Checked[oldIndex];
    ListBoxCodecs.Items.Delete(oldIndex);

    ListBoxCodecs.Items.Insert(newIndex, codecName);
    ListBoxCodecs.Checked[newIndex] := isChecked;
    ListBoxCodecs.ItemIndex := newIndex;
end;

function TFormSettings.GetCodecsString : string;
var
    i, count : Integer;
    {codec: string;}
begin
    count := Self.ListBoxCodecs.Count;
    result := '';
    for i := 0 to count - 1 do begin
        if Self.ListBoxCodecs.Checked[i] = True
            then result := result + Self.ListBoxCodecs.Items[i] + '|';
    end;
end;

procedure TFormSettings.SetupUserInput;
begin
    Settings.StunServer := EditStun.Text;
    try
        Settings.ListenPort := StrToInt(EditSipPort.Text);
    except
        Settings.ListenPort := 0;
    end;

    Settings.ActivePlaybackDevice  := ComboBoxSoundDevice.Text;
    Settings.ActiveRecordDevice    := ComboBoxRecordDevice.Text;
    Settings.ActiveNetworkInterface:= ComboBoxNetworkInterface.Text;
    Settings.ActiveVideoDevice     := ComboBoxVideoDevice.Text;

    if CheckBoxEchoCancelation.Checked
        then Settings.EchoCancelationEnabled := 1
        else Settings.EchoCancelationEnabled := 0;

    if CheckBoxNoiseReduction.Checked
        then Settings.NoiseReductionEnabled := 1
        else Settings.NoiseReductionEnabled := 0;

    if CheckBoxAutoGainControl.Checked
        then Settings.AutoGainControlEnabled := 1
        else Settings.AutoGainControlEnabled := 0;

    settings.UserAgent := EditUserAgent.Text;
    settings.CallerId := EditCallerId.Text;
    settings.RegExpire := 0;
    settings.SetCodecOrder(GetCodecsString, 0);
end;

end.

